Script started on 2021-02-18 21:19:26+05:30
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ cat Stack.h
#include<string>
#include<stdlib.h>
#include<iostream>
using namespace std;

class College
{
    private:
        string name;
        string city;
        string acc;
        int noOfStud;
        int noOfFac;
    public:
        College();
        College(string,string,string,int,int);
        College(const College &);
        ~College();
        void setName(string);
        string getName();
        void setCity(string);
        string getCity();
        void setAcc(string);
        string getAcc();
        void setNoOfStud(int);
        int getNoOfStud();
        void setNoOfFac(int);
        int getNoOfFac();
        friend istream & operator >>(istream& ,College&);
        friend ostream & operator <<(ostream& ,College&);
};

class Stack
{
    private:
        int top;
        int capacity;
        College *arr;
    public:
        Stack();
        Stack(int,int,College *);
        Stack(const Stack &);
        ~Stack();
        int isEmpty();
        int isFull();
        int push(College);
        College pop();
        College peek();
        int checkSize();
        int makeStackEmpty();
        College * displayStack();
};
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ cat StackImp.cpp
#include"Stack.h"

College::College()
{
    name="";
    city="";
    acc="";
    noOfStud=0;
    noOfFac=0;
}
College::College(string name,string city,string acc,int noOfStud,int noOfFac)
{
    this->name=name;
    this->city=city;
    this->acc=acc;
    this->noOfStud=noOfStud;
    this->noOfFac=noOfFac;
}
College::College(const College &ref)
{
    name=ref.name;
    city=ref.city;
    acc=ref.acc;
    noOfFac=ref.noOfFac;
    noOfStud=ref.noOfStud;
}
College::~College()
{
}
void College::setName(string x)
{
    name=x;
}
void College::setCity(string x)
{
    city=x;
}
void College::setAcc(string x)
{
    acc=x;
}
void College::setNoOfStud(int x)
{
    noOfStud=x;
}
void College::setNoOfFac(int x)
{
    noOfFac=x;
}
string College::getName()
{
    return name;
}
string College::getCity()
{
    return city;
}
string College::getAcc()
{
    return acc;
}
int College::getNoOfStud()
{
    return noOfStud;
}
int College::getNoOfFac()
{
    return noOfFac;
}

istream & operator >>(istream& myin ,College& C)
{
    cout<<"\nEnter the name of the College:";
    myin>>C.name;
    C.setName(C.name);
    cout<<"\nEnter the city name:";
    myin>>C.city;
    C.setCity(C.city);
    cout<<"\nEnter Accreditations of the college:";
    myin>>C.acc;
    C.setAcc(C.acc);
    cout<<"\nEnter no. of students studying:";
    myin>>C.noOfStud;
    C.setNoOfStud(C.noOfStud);
    cout<<"\nEnter no. of faculty working:";
    myin>>C.noOfFac;
    C.setNoOfFac(C.noOfFac);
    return myin;
}
ostream & operator <<(ostream& myout ,College& C)
{
    myout<<"\n\nName:"<<C.getName();
    myout<<"\nCity:"<<C.getCity();
    myout<<"\nAccreditations:"<<C.getAcc();
    myout<<"\nNo. of Students:"<<C.getNoOfStud();
    myout<<"\nNo. of Faculty:"<<C.getNoOfFac();
    return myout;
}

Stack::Stack()
{
    top=-1;
    capacity=5;
    arr=new College[capacity];
    for(int i=0;i<capacity;i++)
        arr[i]=College();
}

Stack::Stack(int size,int cap,College *det)
{
    top=size-1;
    capacity=cap;
    arr=new College[cap];
    for(int i=0;i<=top;i++)
        arr[i]=det[i];
    for(int i=top+1;i<cap;i++)
        arr[i]=College();
}

Stack::Stack(const Stack &ref)
{
    top=ref.top;
    capacity=ref.capacity;
    arr=new College[capacity];
    for(int i=0;i<=top;i++)
        arr[i]=ref.arr[i];
    for(int i=top+1;i<capacity;i++)
        arr[i]=College();
}
Stack::~Stack()
{
    delete [] arr;
    arr=NULL;
}

int Stack::isFull()
{
    if(capacity==top+1)
        return 1;
    else
        return 0;
}
int Stack::isEmpty()
{
    if(top==-1)
        return 1;
    else
        return 0;
}

int Stack::push(College ins)
{
    if(!isFull())
    {
        arr[++top]=ins;
        return 1;
    }
    else
        return 0;
}

College Stack::pop()
{
    if(!isEmpty())
    {
        College deletedEntry;
        deletedEntry=arr[top];
        arr[top]=College();
        top--;
        return deletedEntry;
    }
    else
        return College();
}

College Stack::peek()
{
    if(!isEmpty())
        return arr[top];
    else
        return College();
}
int Stack::checkSize()
{
    return top+1;
}
int Stack::makeStackEmpty()
{
    if(!isEmpty())
    {
        top=-1;
        return 1;
    }
    else
        return 0;
}

College* Stack::displayStack()
{
    College *temp=new College[10];
    if(!isEmpty())
        return arr;
    else
        return temp;
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ StackApp.cpp
#include"Stack.h"
int main()
{
    int cap,size,ch,flag,i,pos;
    cout<<"\nEnter Capacity of the list:";
    cin>>cap;
    cout<<"\nEnter no. of Colleges to be added:";
    cin>>size;
    College *col=new College[cap];
    College *temp=new College[cap];
    if(size>0)
    {
        cout<<"\n\t*****************************Enter College Details*****************************";
        for(i=0;i<size;i++)
        {
            cin>>col[i];
            cout<<"\n--------------------------------------";
        }
    }
    Stack s(size,cap,col);
    do
    {
        cout<<"\n\n*|------------------>MENU<-----------------|*";
        cout<<"\n1.Insert Entry at Last\n2.Delete Last Entry\n3.Display Last Entry\n4.Check size\n5.Make Stack Empty\n6.Display Stack\n7.EXIT\n*|----------------------------------|*\nEnter your choice:";
        cin>>ch;
        switch(ch)
        {
            case 1://Push 
                {
                    College C;
                    cout<<"\n\t**************************Enter College Detail to be inserted At Last**************************";
                    cin>>C;
                    flag=s.push(C);
                    if(flag==1)
                        cout<<"\nInsertion Successfull";
                    else
                        cout<<"\nInsertion Failed";
                }break;
            case 2://Pop
                {
                    College pop;
                    cout<<"\nDeleting Last element..................";
                    pop=s.pop();
                    if(pop.getNoOfStud()!=0)
                    {
                        cout<<"\n\n>>>>>>>>>Deletion successful";
                        cout<<"\nPopped Element is:";
                        cout<<pop;
                    }
                    else
                        cout<<"\n\n>>>>>>>>>Deletion Failed";
                }break;
            case 3://Peek
                {
                    College peek;
                    peek=s.peek();
                    if(peek.getNoOfStud()!=0)
                    {
                        cout<<"\n>>>>>>>>>>>>Dipslaying Last Entry<<<<<<<<<<<<<";
                        cout<<peek;
                    }
                    else
                        cout<<"\nNo Element to Display!";
                }break;
            case 4://Size of the stack
                {
                    int size;
                    size=s.checkSize();
                    cout<<"\nSize of the Stack is:"<<size;
                }break;
            case 5://Make Stack Empty
                flag=s.makeStackEmpty();
                if(flag==1)
                {
                    cout<<"\nEmptying the Stack..............\n";
                    cout<<"\n>>>>>>>>Stack is Emptied now!<<<<<<<<<";
                }
                else
                    cout<<"\nStack is already Empty!";
                break;
            case 6://Display Stack
                temp=s.displayStack();
                cout<<"\n\t------------------------DETAILS------------------------";
                cout<<"\nNAME\tCITY\tACCREDITATION\tNo. Of Students\t\tNo. Of Faculty\n";
                cout<<"----------------------------------------------------------------------|\n";
                if(temp[0].getNoOfStud()!=0)
                {
                    for(i=0;temp[i].getNoOfStud()!=0;i++)
                    {
                        cout<<temp[i].getName()<<"\t"<<temp[i].getCity()<<"\t"<<temp[i].getAcc()<<"\t\t\t"<<temp[i].getNoOfStud()<<"\t\t\t\b\b"<<temp[i].getNoOfFac()<<"\n";
                        cout<<"----------------------------------------------------------------------|\n";
                    }
                }
                else
                    cout<<"\nList is empty!";
                break;
            case 7:ch=8;break;
            default:cout<<"\n-----------------Invalid choice!-----------------";
        }
    }while(ch<=7);
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ cat makefile
run.exe:StackImp.o StackApp.o
	g++ -o run.exe StackImp.o StackApp.o
StackImp.o:StackImp.cpp
	g++ -c StackImp.cpp
StackApp.o:StackApp.cpp
	g++ -c StackApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ make
make: 'run.exe' is up to date.
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ ./run.exe 

Enter Capacity of the list:5

Enter no. of Colleges to be added:3

	*****************************Enter College Details*****************************
Enter the name of the College:Msec

Enter the city name:vnr

Enter Accreditations of the college:NAAC

Enter no. of students studying:300

Enter no. of faculty working:350

--------------------------------------
Enter the name of the College:PSG

Enter the city name:cbe

Enter Accreditations of the college:NAAC

Enter no. of students studying:200

Enter no. of faculty working:240

--------------------------------------
Enter the name of the College:NEC

Enter the city name:kpy

Enter Accreditations of the college:NAAC

Enter no. of students studying:400

Enter no. of faculty working:450

--------------------------------------

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:1

	**************************Enter College Detail to be inserted At Last**************************
Enter the name of the College:SAC

Enter the city name:tvl

Enter Accreditations of the college:Naac

Enter no. of students studying:230

Enter no. of faculty working:634

Insertion Successfull

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|
Msec	vnr	NAAC			300			350
----------------------------------------------------------------------|
PSG	cbe	NAAC			200			240
----------------------------------------------------------------------|
NEC	kpy	NAAC			400			450
----------------------------------------------------------------------|
SAC	tvl	Naac			230			634
----------------------------------------------------------------------|


*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:2

Deleting Last element..................

>>>>>>>>>Deletion successful
Popped Element is:

Name:SAC
City:tvl
Accreditations:Naac
No. of Students:230
No. of Faculty:634

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:3

>>>>>>>>>>>>Dipslaying Last Entry<<<<<<<<<<<<<

Name:NEC
City:kpy
Accreditations:NAAC
No. of Students:400
No. of Faculty:450

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:4

Size of the Stack is:3

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:5

Emptying the Stack..............

>>>>>>>>Stack is Emptied now!<<<<<<<<<

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|

List is empty!

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete Last Entry
3.Display Last Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.EXIT
*|----------------------------------|*
Enter your choice:7
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex3$ exit
exit

Script done on 2021-02-18 21:24:30+05:30
