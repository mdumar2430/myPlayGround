Script started on 2021-02-19 06:53:47+05:30 
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ cat Queue.h
#include<string>
#include<stdlib.h>
#include<iostream>
using namespace std;

class College
{
	private:
		string name;
		string city;
		string acc;
		int noOfStud;
		int noOfFac;
	public:
		College();
		College(string,string,string,int,int);
		College(const College &);
		~College();
		void setName(string);
		string getName();
		void setCity(string);
		string getCity();
		void setAcc(string);
		string getAcc();
		void setNoOfStud(int);
		int getNoOfStud();
		void setNoOfFac(int);
		int getNoOfFac();
		friend istream & operator >>(istream& ,College&);
		friend ostream & operator <<(ostream& ,College&);
};

class Queue 
{
	private:
		int front;
		int rear;
		int capacity;
		College *arr;
	public:
		Queue();
		Queue(College *,int,int);
		Queue(const Queue &);
		~Queue();
		int getFront();
		int getRear();
		int isEmpty();
		int isFull();
		int enqueue(College);
		College dequeue();
		College peek();
		int checkSize();
		int makeQueueEmpty();
		College * displayQueue();
};
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ cat QueueImp.cpp 
#include"Queue.h"

College::College()
{
	name="";
	city="";
	acc="";
	noOfStud=0;
	noOfFac=0;
}
College::College(string name,string city,string acc,int noOfStud,int noOfFac)
{
	this->name=name;
	this->city=city;
	this->acc=acc;
	this->noOfStud=noOfStud;
	this->noOfFac=noOfFac;
}
College::College(const College &ref)
{
	name=ref.name;
	city=ref.city;
	acc=ref.acc;
	noOfFac=ref.noOfFac;
	noOfStud=ref.noOfStud;
}
College::~College()
{
}
void College::setName(string x)
{
	name=x;
}
void College::setCity(string x)
{
	city=x;
}
void College::setAcc(string x)
{
	acc=x;
}
void College::setNoOfStud(int x)
{
	noOfStud=x;
}
void College::setNoOfFac(int x)
{
	noOfFac=x;
}
string College::getName()
{
	return name;
}
string College::getCity()
{
	return city;
}
string College::getAcc()
{
	return acc;
}
int College::getNoOfStud()
{
	return noOfStud;
}
int College::getNoOfFac()
{
	return noOfFac;
}

istream & operator >>(istream& myin ,College& C)
{
	cout<<"\nEnter the name of the College:";
	myin>>C.name;
	C.setName(C.name);
	cout<<"\nEnter the city name:";
	myin>>C.city;
	C.setCity(C.city);
	cout<<"\nEnter Accreditations of the college:";
	myin>>C.acc;
	C.setAcc(C.acc);
	cout<<"\nEnter no. of students studying:";
	myin>>C.noOfStud;
	C.setNoOfStud(C.noOfStud);
	cout<<"\nEnter no. of faculty working:";
	myin>>C.noOfFac;
	C.setNoOfFac(C.noOfFac);
	return myin;
}
ostream & operator <<(ostream& myout ,College& C)
{
	myout<<"\n\nName:"<<C.getName();
	myout<<"\nCity:"<<C.getCity();
	myout<<"\nAccreditations:"<<C.getAcc();
	myout<<"\nNo. of Students:"<<C.getNoOfStud();
	myout<<"\nNo. of Faculty:"<<C.getNoOfFac();
	return myout;
}

Queue::Queue()
{
	front=-1;
	rear=-1;
	capacity=5;
	arr=new College[capacity];
	for(int i=0;i<capacity;i++)
		arr[i]=College();
}

Queue::Queue(College *det,int size,int cap)
{
	front=0;
	rear=size-1;
	capacity=cap;
	arr=new College[cap];
	for(int i=front;i<=rear;i++)
		arr[i]=det[i];
	for(int i=rear+1;i<cap;i++)
		arr[i]=College();
}

Queue::Queue(const Queue &ref)
{
	front=ref.front;
	rear=ref.rear;
	capacity=ref.capacity;
	arr=new College[capacity];
	for(int i=front;i<=rear;i++)
		arr[i]=ref.arr[i];
	for(int i=rear+1;i<capacity;i++)
		arr[i]=College();
}
Queue::~Queue()
{
	delete [] arr;
	arr=NULL;
}
int Queue::getFront()
{
	return front;
}
int Queue::getRear()
{
	return rear;
}
int Queue::isFull()
{
	if(capacity==rear+1)
		return 1;
	else
		return 0;
}
int Queue::isEmpty()
{
	if((front==-1 && rear==-1) || (front>rear))
		return 1;
	else
		return 0;
}

int Queue::enqueue(College ins)
{
	if(!isFull())
	{
		if(front==-1 && rear==-1)
		{
			front =0;
			rear=0;
			arr[rear]=ins;
		}
		else
		{
			arr[++rear]=ins;
		}
		return 1;
	}
	else
		return 0;
}

College Queue::dequeue()
{
	if(!isEmpty())
	{
		College deletedEntry;
		deletedEntry=arr[front];
		if(front==0 && rear==0)
		{
			front=-1;
			rear=-1;
		}
		else
		{
			front++;
		}
		return deletedEntry;
	}
	else
		return College();
}

College Queue::peek()
{
	if(!isEmpty())
		return arr[front];
	else
		return College();
}
int Queue::checkSize()
{
	return (rear-front)+1;
}
int Queue::makeQueueEmpty()
{
	if(!isEmpty())
	{
		front=-1;
		rear=-1;
		return 1;
	}
	else
		return 0;
}

College* Queue::displayQueue()
{
	College *temp=new College[10];
	College *queue=new College[10];
	if(!isEmpty())
	{
		for(int i=0;i<=(rear-front);i++)
			queue[i]=arr[i+front];
		return queue;
	}
	else
		return temp;
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ cat QueueApp.cpp 
#include"Queue.h"
int main()
{
	int cap,size,ch,flag,i,pos;
	cout<<"\nEnter Capacity of the list:";
	cin>>cap;
	cout<<"\nEnter no. of Colleges to be added:";
	cin>>size;
	College *col=new College[cap];
	College *temp=new College[cap];
	if(size>0)
	{
		cout<<"\n\t*****************************Enter College Details*****************************";
		for(i=0;i<size;i++)
		{
			cin>>col[i];
			cout<<"\n--------------------------------------";
		}
	}
	Queue q(col,size,cap);
	do
	{
		cout<<"\n\n*|------------------>MENU<-----------------|*";
		cout<<"\n1.Insert Entry at Last\n2.Delete First Entry\n3.Display First Entry\n4.Check size\n5.Make Queue Empty\n6.Display Queue\n7.EXIT\n*|----------------------------------|*\nEnter your choice:";
		cin>>ch;
		switch(ch)
		{
			case 1://Enqueue
				{
					College C;
					cout<<"\n\t**************************Enter College Detail to be inserted At Last**************************";
					cin>>C;
					flag=q.enqueue(C);
					if(flag==1)
						cout<<"\nInsertion Successfull";
					else
						cout<<"\nInsertion Failed";
				}break;
			case 2://Dequeue
				{
					College del;
					cout<<"\nDeleting First element..................";
					del=q.dequeue();
					if(del.getNoOfStud()!=0)
					{
						cout<<"\n\n>>>>>>>>>Deletion successful";
						cout<<"\nDeleted Element is:\n\n";
						cout<<del;
					}
					else
						cout<<"\n\n>>>>>>>>>Deletion Failed";
				}break;
			case 3://Peek
				{
					College peek;
					peek=q.peek();
					if(peek.getNoOfStud()!=0)
					{
						cout<<"\n>>>>>>>>>>>>Dipslaying First Entry<<<<<<<<<<<<<";
						cout<<peek;
					}
					else
						cout<<"\nNo Element to Display!";
				}break;
			case 4://Size of the stack
				{
					int size;
					size=q.checkSize();
					cout<<"\nSize of the Queue is:"<<size;
				}break;
			case 5://Make Queue Empty
				flag=q.makeQueueEmpty();
				if(flag==1)
				{
					cout<<"\nEmptying the Queue..............\n";
					cout<<"\n>>>>>>>>Queue is Emptied now!<<<<<<<<<";
				}
				else
					cout<<"\nQueue is already Empty!";
				break;
			case 6://Display Queue
				temp=q.displayQueue();
				cout<<"\n\t------------------------DETAILS------------------------";
				cout<<"\nNAME\tCITY\tACCREDITATION\tNo. Of Students\t\tNo. Of Faculty\n";
				cout<<"----------------------------------------------------------------------|\n";
				if(temp[0].getNoOfStud()!=0)
				{
					for(i=0;temp[i].getNoOfStud()!=0;i++)
					{
						cout<<temp[i].getName()<<"\t"<<temp[i].getCity()<<"\t"<<temp[i].getAcc()<<"\t\t\t"<<temp[i].getNoOfStud()<<"\t\t\t\b\b"<<temp[i].getNoOfFac()<<"\n";
						cout<<"----------------------------------------------------------------------|\n";
					}
				}
				else
					cout<<"\nQueue is empty!";
				break;
			case 7:ch=8;break;
			default:cout<<"\n-----------------Invalid choice!-----------------";
		}
	}while(ch<=7);

}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ cat makefile 
run.exe:QueueImp.o QueueApp.o
	g++ -o run.exe QueueImp.o QueueApp.o
QueueImp.o:QueueImp.cpp
	g++ -c QueueImp.cpp
QueueApp.o:QueueApp.cpp
	g++ -c QueueApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ make
make: 'run.exe' is up to date.
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4$ ./run.exe 

Enter Capacity of the list:5

Enter no. of Colleges to be added:2

	*****************************Enter College Details*****************************
Enter the name of the College:MSEC

Enter the city name:VNR

Enter Accreditations of the college:NAAC

Enter no. of students studying:100

Enter no. of faculty working:150

--------------------------------------
Enter the name of the College:PSG

Enter the city name:cbe

Enter Accreditations of the college:NAAC

Enter no. of students studying:300

Enter no. of faculty working:350

--------------------------------------

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:1

	**************************Enter College Detail to be inserted At Last**************************
Enter the name of the College:PSN

Enter the city name:TVL

Enter Accreditations of the college:NAAC

Enter no. of students studying:250

Enter no. of faculty working:276

Insertion Successfull

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|
MSEC	VNR	NAAC			100			150
----------------------------------------------------------------------|
PSG	cbe	NAAC			300			350
----------------------------------------------------------------------|
PSN	TVL	NAAC			250			276
----------------------------------------------------------------------|


*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:2

Deleting First element..................

>>>>>>>>>Deletion successful
Deleted Element is:



Name:MSEC
City:VNR
Accreditations:NAAC
No. of Students:100
No. of Faculty:150

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|
PSG	cbe	NAAC			300			350
----------------------------------------------------------------------|
PSN	TVL	NAAC			250			276
----------------------------------------------------------------------|


*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:3

>>>>>>>>>>>>Dipslaying First Entry<<<<<<<<<<<<<

Name:PSG
City:cbe
Accreditations:NAAC
No. of Students:300
No. of Faculty:350

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:4

Size of the Queue is:2

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|
PSG	cbe	NAAC			300			350
----------------------------------------------------------------------|
PSN	TVL	NAAC			250			276
----------------------------------------------------------------------|


*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:5

Emptying the Queue..............

>>>>>>>>Queue is Emptied now!<<<<<<<<<

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:6

	------------------------DETAILS------------------------
NAME	CITY	ACCREDITATION	No. Of Students		No. Of Faculty
----------------------------------------------------------------------|

Queue is empty!

*|------------------>MENU<-----------------|*
1.Insert Entry at Last
2.Delete First Entry
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.EXIT
*|----------------------------------|*
Enter your choice:7
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex4 $exit
exit

Script done on 2021-02-19 06:56:15+05:30 [COMMAND_EXIT_CODE="0"]
