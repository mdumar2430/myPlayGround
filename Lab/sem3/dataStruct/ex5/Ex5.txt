Script started on 2021-02-19 07:10:22+05:30 [TERM="xterm-256color" TTY="/dev/tty1" COLUMNS="158" LINES="39"]
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5$ cd Lqueue/
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ cat LQueue.h
#include<iostream>
#include<stdlib.h>
#include<string>
using namespace std;

class College
{
    private:
        string name;
        string city;
        string acc;
        int noOfStud;
        int noOfFac;
    public:
        College();
        College(string,string,string,int,int);
        College(const College &);
        ~College();
        void setName(string);
        string getName();
        void setCity(string);
        string getCity();
        void setAcc(string);
        string getAcc();
        void setNoOfStud(int);
        int getNoOfStud();
        void setNoOfFac(int);
        int getNoOfFac();
        friend istream & operator >>(istream& ,College&);
        friend ostream & operator <<(ostream& ,College&);
};

class Node
{
    private:
        College data;
        Node *next;
    public:
        Node();
        Node(College,Node*);
        Node(const Node &);
        ~Node();
        friend class L_Queue;
};

class L_Queue
{
    private:
        Node *first;
    public:
        L_Queue();
        L_Queue(Node *);
        L_Queue(const L_Queue &);
        ~L_Queue();
        int isEmpty();
        void enqueue(Node *);
        College dequeue();
        College peek();
        int checkSize();
        int makeQueueEmpty();
        void displayQueue();
};

mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ cat LQueueImp.cpp 
#include"LQueue.h"

College::College()
{
    name="";
    city="";
    acc="";
    noOfStud=0;
    noOfFac=0;
}

College::College(string name,string city,string acc,int noOfStud,int noOfFac)
{
    this->name=name;
    this->city=city;
    this->acc=acc;
    this->noOfStud=noOfStud;
    this->noOfFac=noOfFac;
}
College::College(const College &ref)
{
    name=ref.name;
    city=ref.city;
    acc=ref.acc;
    noOfFac=ref.noOfFac;
    noOfStud=ref.noOfStud;
}
College::~College()
{
}
void College::setName(string x)
{
    name=x;
}
void College::setCity(string x)
{
    city=x;
}
void College::setAcc(string x)
{
    acc=x;
}
void College::setNoOfStud(int x)
{
    noOfStud=x;
}
void College::setNoOfFac(int x)
{
    noOfFac=x;
}
string College::getName()
{
    return name;
}
string College::getCity()
{
    return city;
}
string College::getAcc()
{
    return acc;
}
int College::getNoOfStud()
{
    return noOfStud;
}
int College::getNoOfFac()
{
    return noOfFac;
}

istream & operator >>(istream& myin ,College& C)
{
    cout<<"\nEnter the name of the College:";
    myin>>C.name;
    C.setName(C.name);
    cout<<"\nEnter the city name:";
    myin>>C.city;
    C.setCity(C.city);
    cout<<"\nEnter Accreditations of the college:";
    myin>>C.acc;
    C.setAcc(C.acc);
    cout<<"\nEnter no. of students studying:";
    myin>>C.noOfStud;
    C.setNoOfStud(C.noOfStud);
    cout<<"\nEnter no. of faculty working:";
    myin>>C.noOfFac;
    C.setNoOfFac(C.noOfFac);
    return myin;
}
ostream & operator <<(ostream& myout ,College& C)
{
    myout<<"\n\nName:"<<C.getName();
    myout<<"\nCity:"<<C.getCity();
    myout<<"\nAccreditations:"<<C.getAcc();
    myout<<"\nNo. of Students:"<<C.getNoOfStud();
    myout<<"\nNo. of Faculty:"<<C.getNoOfFac();
    return myout;
}

Node::Node()
{
    data=College();
    next=NULL;
}
Node::Node(College data,Node *n)
{
    this->data=data;
    next=n;
}
Node::Node(const Node &ref)
{
    data=ref.data;
    next=ref.next;
}
Node::~Node()
{
    data=College();
    next=NULL;
}

L_Queue::L_Queue()
{
    first=NULL;
}
L_Queue::L_Queue(Node *f)
{
    first=f;
}
L_Queue::L_Queue(const L_Queue &f)
{
    first=f.first;
}
L_Queue::~L_Queue()
{
    first=NULL;
}
int L_Queue::isEmpty()
{
    if(first==NULL)
        return 1;
    else
        return 0;
}
void L_Queue::enqueue(Node *newNode)
{
    if(isEmpty())
        first=newNode;
    else
    {
        Node *temp=first;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newNode;
    }
}

College L_Queue::dequeue()
{
    College del;
    if(!isEmpty())
    {
        Node *temp=first;
        del=temp->data;
        first=first->next;
        delete temp;
        temp=NULL;
        return del;
    }
    else
        return College();
}

College L_Queue::peek()
{
    if(!isEmpty())
        return first->data;
    else
        return College();
}

int L_Queue::checkSize()
{
    Node *temp=first;
    int count=0;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
    }
    return count;
}

int L_Queue::makeQueueEmpty()
{
    if(!isEmpty())
    {
        first=NULL;
        return 1;
    }
    else
        return 0;
}
void L_Queue::displayQueue()
{
    if(!isEmpty())
    {
        Node *temp=first;
        while(temp!=NULL)
        {
            cout<<temp->data;
            temp=temp->next;
        }
    }
    else
        cout<<"\nQueue is Empty,Nothing to display!";
}

mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ cat LQueueApp.cpp 
#include"LQueue.h"
int main()
{
    int ch,i,flag,pos;
    College col,res;
    L_Queue q;
    do
    {
        cout<<"\n\n|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|";
        cout<<"\n1.Insert at Last\n2.Delete at First\n3.Display First Entry\n4.Check size\n5.Make Queue Empty\n6.Display Queue\n7.Exit\n|----------------------------------------|\n>>Enter your choice:";
        cin>>ch;
        switch(ch)
        {
            case 1://Enqueue
                {
                    cout<<"\n\t*************Enter College details to insert at Last*************\n";
                    cin>>col;
                    Node *ins=new Node(col,NULL);
                    q.enqueue(ins);
                    cout<<"\n---------->INSERTION SUCCESSFUL<----------";
                }
                break;
            case 2://Dequeue
                cout<<"\n****************Deleting First Entry****************\n";
                res=q.dequeue();
                if(res.getNoOfStud()!=0)
                {
                    cout<<"\n---------->DELETION SUCCESSFUL<----------";
                    cout<<"\nDeleted Entry:-\n";
                    cout<<res;
                }
                else
                    cout<<"\n---------->DELETION FAILED!<----------";
                break;
            case 3://Peek
                cout<<"\n****************Displaying First Entry****************\n";
                res=q.peek();
                if(res.getNoOfStud()!=0)
                    cout<<res;
                else
                    cout<<"\n---------->No ELEMENT FOUND!<----------";
                break;
            case 4://Check Size
                flag=q.checkSize();
                cout<<"\nSize of the Queue is:"<<flag;
                break;
            case 5://Make Queue Empty
                 flag=q.makeQueueEmpty();
                 if(flag==1)
                     cout<<"\n------------->Queue is Emptied now!<-------------";
                 else 
                     cout<<"\n------------->Queue is already Empty<-------------";
                 break;
            case 6://Display stack
                 q.displayQueue();
                 break;
            case 7:ch=8;break;
            default:cout<<"\nInvalid Choice!";break;
        }
    }while(ch<=7);

}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ cat makefile
out.exe:LQueueImp.o LQueueApp.o
    g++ -o out.exe LQueueImp.o LQueueApp.o
LQueueImp.o:LQueueImp.cpp
    g++ -c LQueueImp.cpp
LQueueApp.o:LQueueApp.cpp
    g++ -c LQueueApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ make
make: 'out.exe' is up to date.
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ ./out.exe 


|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:1

    *************Enter College details to insert at Last*************

Enter the name of the College:MSEC

Enter the city name:vnr

Enter Accreditations of the college:NAAC

Enter no. of students studying:100

Enter no. of faculty working:200

---------->INSERTION SUCCESSFUL<----------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:1

    *************Enter College details to insert at Last*************

Enter the name of the College:PSG

Enter the city name:cbe

Enter Accreditations of the college:NAAC

Enter no. of students studying:200

Enter no. of faculty working:250

---------->INSERTION SUCCESSFUL<----------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:6


Name:MSEC
City:vnr
Accreditations:NAAC
No. of Students:100
No. of Faculty:200

Name:PSG
City:cbe
Accreditations:NAAC
No. of Students:200
No. of Faculty:250

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:2

****************Deleting First Entry****************

---------->DELETION SUCCESSFUL<----------
Deleted Entry:-


Name:MSEC
City:vnr
Accreditations:NAAC
No. of Students:100
No. of Faculty:200

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:3

****************Displaying First Entry****************


Name:PSG
City:cbe
Accreditations:NAAC
No. of Students:200
No. of Faculty:250

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:6


Name:PSG
City:cbe
Accreditations:NAAC
No. of Students:200
No. of Faculty:250

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:4

Size of the Queue is:1

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:5

------------->Queue is Emptied now!<-------------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:6

Queue is Empty,Nothing to display!

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at Last
2.Delete at First
3.Display First Entry
4.Check size
5.Make Queue Empty
6.Display Queue
7.Exit
|----------------------------------------|
>>Enter your choice:7
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lqueue$ cd ../Lstack
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ cat LStack.h
#include<iostream>
#include<stdlib.h>
#include<string>
using namespace std;

class College
{
    private:
        string name;
        string city;
        string acc;
        int noOfStud;
        int noOfFac;
    public:
        College();
        College(string,string,string,int,int);
        College(const College &);
        ~College();
        void setName(string);
        string getName();
        void setCity(string);
        string getCity();
        void setAcc(string);
        string getAcc();
        void setNoOfStud(int);
        int getNoOfStud();
        void setNoOfFac(int);
        int getNoOfFac();
        friend istream & operator >>(istream& ,College&);
        friend ostream & operator <<(ostream& ,College&);
};

class Node
{
    private:
        College data;
        Node *next;
    public:
        Node();
        Node(College,Node*);
        Node(const Node &);
        ~Node();
        friend class L_Stack;
};

class L_Stack
{
    private:
        Node *top;
    public:
        L_Stack();
        L_Stack(Node *);
        L_Stack(const L_Stack &);
        ~L_Stack();
        int isEmpty();
        void push(Node *);
        College pop();
        College peek();
        int checkSize();
        int makeStackEmpty();
        void displayStack();
};

mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ cat LStackImp.cpp 
#include"LStack.h"

College::College()
{
    name="";
    city="";
    acc="";
    noOfStud=0;
    noOfFac=0;
}

College::College(string name,string city,string acc,int noOfStud,int noOfFac)
{
    this->name=name;
    this->city=city;
    this->acc=acc;
    this->noOfStud=noOfStud;
    this->noOfFac=noOfFac;
}
College::College(const College &ref)
{
    name=ref.name;
    city=ref.city;
    acc=ref.acc;
    noOfFac=ref.noOfFac;
    noOfStud=ref.noOfStud;
}
College::~College()
{
}
void College::setName(string x)
{
    name=x;
}
void College::setCity(string x)
{
    city=x;
}
void College::setAcc(string x)
{
    acc=x;
}
void College::setNoOfStud(int x)
{
    noOfStud=x;
}
void College::setNoOfFac(int x)
{
    noOfFac=x;
}
string College::getName()
{
    return name;
}
string College::getCity()
{
    return city;
}
string College::getAcc()
{
    return acc;
}
int College::getNoOfStud()
{
    return noOfStud;
}
int College::getNoOfFac()
{
    return noOfFac;
}

istream & operator >>(istream& myin ,College& C)
{
    cout<<"\nEnter the name of the College:";
    myin>>C.name;
    C.setName(C.name);
    cout<<"\nEnter the city name:";
    myin>>C.city;
    C.setCity(C.city);
    cout<<"\nEnter Accreditations of the college:";
    myin>>C.acc;
    C.setAcc(C.acc);
    cout<<"\nEnter no. of students studying:";
    myin>>C.noOfStud;
    C.setNoOfStud(C.noOfStud);
    cout<<"\nEnter no. of faculty working:";
    myin>>C.noOfFac;
    C.setNoOfFac(C.noOfFac);
    return myin;
}
ostream & operator <<(ostream& myout ,College& C)
{
    myout<<"\n\nName:"<<C.getName();
    myout<<"\nCity:"<<C.getCity();
    myout<<"\nAccreditations:"<<C.getAcc();
    myout<<"\nNo. of Students:"<<C.getNoOfStud();
    myout<<"\nNo. of Faculty:"<<C.getNoOfFac();
    return myout;
}

Node::Node()
{
    data=College();
    next=NULL;
}
Node::Node(College data,Node *n)
{
    this->data=data;
    next=n;
}
Node::Node(const Node &ref)
{
    data=ref.data;
    next=ref.next;
}
Node::~Node()
{
    data=College();
    next=NULL;
}

L_Stack::L_Stack()
{
    top=NULL;
}
L_Stack::L_Stack(Node *f)
{
    top=f;
}
L_Stack::L_Stack(const L_Stack &f)
{
    top=f.top;
}
L_Stack::~L_Stack()
{
    top=NULL;
}
int L_Stack::isEmpty()
{
    if(top==NULL)
        return 1;
    else
        return 0;
}
void L_Stack::push(Node *newNode)
{
    if(isEmpty())
        top=newNode;
    else
    {
        newNode->next=top;
        top=newNode;
    }
}

College L_Stack::pop()
{
    if(!isEmpty())
    {
        Node *temp=top;
        College del=temp->data;
        top=top->next;
        delete temp;
        temp=NULL;
        return del;
    }
    else
        return College();
}

College L_Stack::peek()
{
    if(!isEmpty())
        return top->data;
    else
        return College();
}

int L_Stack::checkSize()
{
    Node *temp=top;
    int count=0;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
    }
    return count;
}

int L_Stack::makeStackEmpty()
{
    if(!isEmpty())
    {
        top=NULL;
        return 1;
    }
    else
        return 0;
}
void L_Stack::displayStack()
{
    if(!isEmpty())
    {
        Node *temp=top;
        while(temp!=NULL)
        {
            cout<<temp->data;
            temp=temp->next;
        }
    }
    else
        cout<<"\nStack is Empty,Nothing to display!";
}

mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ cat LStackApp.cpp 
#include"LStack.h"
int main()
{
    int ch,i,flag,pos;
    College col,res;
    L_Stack s;
    do
    {
        cout<<"\n\n|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|";
        cout<<"\n1.Insert at First\n2.Delete at First\n3.Display First Entry\n4.Check size\n5.Make Stack Empty\n6.Display Stack\n7.Exit\n|----------------------------------------|\n>>Enter your choice:";
        cin>>ch;
        switch(ch)
        {
            case 1://Push
                {
                    cout<<"\n\t*************Enter College details to insert at first*************\n";
                    cin>>col;
                    Node *ins=new Node(col,NULL);
                    s.push(ins);
                    cout<<"\n---------->INSERTION SUCCESSFUL<----------";
                }
                break;
            case 2://Pop
                cout<<"\n****************Deleting First Entry****************\n";
                res=s.pop();
                if(res.getNoOfStud()!=0)
                {
                    cout<<"\n---------->DELETION SUCCESSFUL<----------";
                    cout<<"\nDeleted Entry:-\n";
                    cout<<res;
                }
                else
                    cout<<"\n---------->DELETION FAILED!<----------";
                break;
            case 3://Peek
                cout<<"\n****************Displaying First Entry****************\n";
                res=s.peek();
                if(res.getNoOfStud()!=0)
                    cout<<res;
                else
                    cout<<"\n---------->No ELEMENT FOUND!<----------";
                break;
            case 4://Check Size
                flag=s.checkSize();
                cout<<"\nSize of the Stack is:"<<flag;
                break;
            case 5://Make Stack Empty
                 flag=s.makeStackEmpty();
                 if(flag==1)
                     cout<<"\n------------->Stack is Emptied now!<-------------";
                 else 
                     cout<<"\n------------->Stack is already Empty<-------------";
                 break;
            case 6://Display stack
                 s.displayStack();
                 break;
            case 7:ch=8;break;
            default:cout<<"\nInvalid Choice!";break;
        }
    }while(ch<=7);

}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ cat makefile 
out.exe:LStackImp.o LStackApp.o
    g++ -o out.exe LStackImp.o LStackApp.o
LStackImp.o:LStackImp.cpp
    g++ -c LStackImp.cpp
LStackApp.o:LStackApp.cpp
    g++ -c LStackApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ make
make: 'out.exe' is up to date.
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ ./out.exe 


|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:1

    *************Enter College details to insert at first*************

Enter the name of the College:MSEC

Enter the city name:VNR

Enter Accreditations of the college:NAAC

Enter no. of students studying:150

Enter no. of faculty working:200

---------->INSERTION SUCCESSFUL<----------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:1

    *************Enter College details to insert at first*************

Enter the name of the College:PSN

Enter the city name:tvl

Enter Accreditations of the college:NAAC

Enter no. of students studying:250

Enter no. of faculty working:300

---------->INSERTION SUCCESSFUL<----------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:1

    *************Enter College details to insert at first*************

Enter the name of the College:SAC

Enter the city name:tvl

Enter Accreditations of the college:NAAC

Enter no. of students studying:300

Enter no. of faculty working:350

---------->INSERTION SUCCESSFUL<----------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:6


Name:SAC
City:tvl
Accreditations:NAAC
No. of Students:300
No. of Faculty:350

Name:PSN
City:tvl
Accreditations:NAAC
No. of Students:250
No. of Faculty:300

Name:MSEC
City:VNR
Accreditations:NAAC
No. of Students:150
No. of Faculty:200

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:4

Size of the Stack is:3

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:2

****************Deleting First Entry****************

---------->DELETION SUCCESSFUL<----------
Deleted Entry:-


Name:SAC
City:tvl
Accreditations:NAAC
No. of Students:300
No. of Faculty:350

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:6


Name:PSN
City:tvl
Accreditations:NAAC
No. of Students:250
No. of Faculty:300

Name:MSEC
City:VNR
Accreditations:NAAC
No. of Students:150
No. of Faculty:200

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:3

****************Displaying First Entry****************


Name:PSN
City:tvl
Accreditations:NAAC
No. of Students:250
No. of Faculty:300

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:4

Size of the Stack is:2

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:5

------------->Stack is Emptied now!<-------------

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:6

Stack is Empty,Nothing to display!

|>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<|
1.Insert at First
2.Delete at First
3.Display First Entry
4.Check size
5.Make Stack Empty
6.Display Stack
7.Exit
|----------------------------------------|
>>Enter your choice:7
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex5/Lstack$ exit
exit

Script done on 2021-02-19 07:14:52+05:30 [COMMAND_EXIT_CODE="0"]
