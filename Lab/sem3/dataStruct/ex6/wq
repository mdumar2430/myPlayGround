Script started on 2021-02-21 16:10:16+05:30
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ cat bstHead.h
#include<string>
#include<stdlib.h>
#include<iostream>
using namespace std;

class College
{
    private:
        string name;
        string city;
        string acc;
        int noOfStud;
        int noOfFac;
	int code;
    public:
        College();
        College(string,string,string,int,int,int);
        College(const College &);
        ~College();
        void setName(string);
        string getName();
        void setCity(string);
        string getCity();
        void setAcc(string);
        string getAcc();
        void setNoOfStud(int);
        int getNoOfStud();
        void setNoOfFac(int);
        int getNoOfFac();
	void setCode(int);
	int getCode();
	void dispDetails();
        friend istream & operator >>(istream& ,College&);
        friend ostream & operator <<(ostream& ,College&);
	friend class TreeNode;
};

class TreeNode
{
    private:
        College *C;
        TreeNode *left;
        TreeNode *right;
    public:
        TreeNode();
        TreeNode(string,string,string,int,int,int);
        ~TreeNode();
        College * getCollege(TreeNode *);
        void dispDetails();
	friend class BST;
};

class BST
{
	private:
		TreeNode *root;
	public:
		BST(); 
	 	~BST(); 
	      	int isEmpty();
	       	TreeNode * getRoot();
	       	int insert(TreeNode *,TreeNode *);
	       	void preOrder(TreeNode *);
	       	void inOrder(TreeNode *);
	       	void postOrder(TreeNode *);
	       	TreeNode* search(TreeNode *,int);
	       	College* findMax(TreeNode *);
	       	College* findMin(TreeNode *); 
		College* deleteCollege(int); 
};


mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ cat bstImp.cpp
#include"bstHead.h"

College::College()
{
    name="";
    city="";
    acc="";
    noOfStud=0;
    noOfFac=0;
    code=0;
}
College::College(string name,string city,string acc,int noOfStud,int noOfFac,int code)
{
    this->name=name;
    this->city=city;
    this->acc=acc;
    this->noOfStud=noOfStud;
    this->noOfFac=noOfFac;
    this->code=code;
}
College::College(const College &ref)
{
    name=ref.name;
    city=ref.city;
    acc=ref.acc;
    noOfFac=ref.noOfFac;
    noOfStud=ref.noOfStud;
    code=ref.code;
}
College::~College()
{
}
void College::setName(string x)
{
    name=x;
}
void College::setCity(string x)
{
    city=x;
}
void College::setAcc(string x)
{
    acc=x;
}
void College::setNoOfStud(int x)
{
    noOfStud=x;
}
void College::setNoOfFac(int x)
{
    noOfFac=x;
}
void College::setCode(int code)
{
    this->code=code;
}
string College::getName()
{
    return name;
}
string College::getCity()
{
    return city;
}
string College::getAcc()
{
    return acc;
}
int College::getNoOfStud()
{
    return noOfStud;
}
int College::getNoOfFac()
{
    return noOfFac;
}
int College::getCode()
{
    return code;
}
istream & operator >>(istream& myin ,College& C)
{
    cout<<"\nEnter the name of the College:";
    myin>>C.name;
    C.setName(C.name);
    cout<<"\nEnter the city name:";
    myin>>C.city;
    C.setCity(C.city);
    cout<<"\nEnter Accreditations of the college:";
    myin>>C.acc;
    C.setAcc(C.acc);
    cout<<"\nEnter no. of students studying:";
    myin>>C.noOfStud;
    C.setNoOfStud(C.noOfStud);
    cout<<"\nEnter no. of faculty working:";
    myin>>C.noOfFac;
    C.setNoOfFac(C.noOfFac);
    cout<<"\nEnter Counselling code:";
    myin>>C.code;
    C.setCode(C.code);
    return myin;
}
ostream & operator <<(ostream& myout ,College& C)
{
    myout<<"\n\nName:"<<C.getName();
    myout<<"\nCity:"<<C.getCity();
    myout<<"\nAccreditations:"<<C.getAcc();
    myout<<"\nNo. of Colleges:"<<C.getNoOfStud();
    myout<<"\nNo. of Faculty:"<<C.getNoOfFac();
    myout<<"\nCounselling code:"<<C.getCode();
    return myout;
}
void College::dispDetails()
{
    cout<<name<<"\t"<<city<<"\t"<<acc<<"\t\t"<<noOfStud<<"\t\t"<<noOfFac<<"\t\t"<<code<<"\n";
}

TreeNode::TreeNode()
{
    left=NULL;
    right=NULL;
}
TreeNode::TreeNode(string name,string city,string acc,int noOfStud,int noOfFac,int code)
{
    C=new College(name,city,acc,noOfStud,noOfFac,code);
    right=NULL;
    left=NULL;
}
TreeNode::~TreeNode()
{
    right =NULL;
    left=NULL;
}
College * TreeNode::getCollege(TreeNode *node)
{
    return node->C;
}
void TreeNode::dispDetails()
{
    C->dispDetails();
}

BST::BST()
{
    root=NULL;
}
BST::~BST()
{
    root=NULL;
}
int BST::isEmpty()
{
    return root==NULL;
}
TreeNode * BST::getRoot()
{
    return root;
}
int BST::insert(TreeNode *temp,TreeNode *newNode)
{
    if(isEmpty()) 
    {
        root=newNode;
        return 1;
    }
    else //Tree is not empty
    {
        if(temp->C->getCode() > newNode->C->getCode())
        {
        if(temp->left==NULL)//Left insertion possible
                temp->left=newNode;
            else
                insert(temp->left,newNode);
            return 1;
        }
        if(temp->C->getCode() < newNode->C->getCode())
        {
            if(temp->right==NULL)//Right insertion possible
            {
                temp->right=newNode;
                return 1;
            }
            else
                insert(temp->right,newNode);
            return 1;
         }
         return -1;
    }
}
TreeNode* BST::search(TreeNode *temp,int ele)
{
	if(temp==NULL || temp->C->getCode()==ele)
         return temp;
    else if(temp->C->getCode() > ele)
         search(temp->left,ele);
    else if(temp->C->getCode() < ele)
         search(temp->right,ele);
}
College* BST::findMin(TreeNode *temp)
{
    if(temp->left==NULL)
    {
          return temp->C;
    }
    else
          findMin(temp->left);
}
College* BST::findMax(TreeNode *temp)
{
    if(temp->right==NULL)
         return temp->C;
    else
         findMax(temp->right);
}
void BST::inOrder(TreeNode *temp)
{
    if(temp!=NULL)
    {
         inOrder(temp->left);
         temp->C->dispDetails();
         inOrder(temp->right);
    }
}
void BST::preOrder(TreeNode *temp)
{
    if(temp!=NULL)
    {
         temp->C->dispDetails();
         preOrder(temp->left);
         preOrder(temp->right);
    }
}
void BST::postOrder(TreeNode *temp)
{
    if(temp!=NULL)
    {
         postOrder(temp->left);
         postOrder(temp->right);
         temp->C->dispDetails();
    }
}
College* BST :: deleteCollege(int ele)
{
    TreeNode *parent = NULL;
    TreeNode *temp=root;
    while(temp!=NULL) //Tree is not empty
    {
        if(temp->C->getCode()==ele)
        {
            College *del=temp->C;
            if(temp->left==NULL && temp->right==NULL)
            {//Node wothout child
                if(temp==root)//Delete root
                    root=NULL;
                else //Delete node without child
                {
                    if(parent->left == temp)
                         parent->left=NULL;
                    else
                         parent->right=NULL;
                 }
                 delete temp;
                 temp=NULL;
                 return del;
            }
            else if(temp->left!=NULL && temp->right!=NULL)
            { //Node with two child
                 TreeNode *temp1=temp->right;
                 if(temp1->left==NULL)
                 {
                     temp->C=temp1->C;
                     temp->right=temp1->right;
                     delete temp1;
                     temp1=NULL;
                 }
                 else
                 {
                     while(temp1->left!=NULL)
                     {
                         parent=temp1;
                         temp1=temp1->left;
                     }
                     temp->C=temp1->C;
                     if(temp1->right!=NULL)
                         parent->left=temp1->right;
                     else
                         parent->left=NULL;
                     delete temp1;
                     temp1=NULL;
                 }
                 return del;
            }
            else
            {//Node with 1 child
               if(temp==root)
               {
                 if(temp->left!=NULL && temp->right==NULL)
                     root=temp->left;
                 else
                     root=temp->right;
                 delete temp;
                 temp=NULL;
                 return del;
              }
              else
              {
                 if(parent->right==temp)
                 {
                     if(temp->right!=NULL && temp->left==NULL)
                         parent->right=temp->right;
                     else
                         parent->right=temp->left;
                 }
                 else
                 {
                     if(temp->left!=NULL && temp->right==NULL)
                         parent->left=temp->left;
                     else
                         parent->left=temp->right;
                 }
                 delete temp;
                 temp=NULL;
                 return del;
              }
         }
    }
    else if(temp->C->getCode() > ele)
    { //Traverse left
        parent=temp;
        temp=temp->left;
    }
    else
    { //Traverse right
        parent=temp;
        temp=temp->right;
    }
    }
    return NULL;
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ cat bstApp.cpp
#include"bstHead.h"

int main()
{
	College col;
	int ch,flag;
	BST b;
	do
	{
		cout<<"\n***************************\n";
		cout<<"1.Insert College details\n";
		cout<<"2.Search using counselling code\n";
		cout<<"3.Find highest counselling code\n";
		cout<<"4.Find lowest counselling code\n";
		cout<<"5.Display details InOrder\n";
		cout<<"6.Display details PreOrder\n";
		cout<<"7.Display details postOrder\n";
		cout<<"8.Delete using counselling code\n";
		cout<<"9.Exit\n";
		cout<<"\n***************************\n";
		cout<<"\nEnter your choice:";
		cin>>ch;
		switch(ch)
		{
			case 1:
				{
					cout<<"\n*********Enter College Details*********\n";
					cin>>col;
					TreeNode *node=new TreeNode(col.getName(),col.getCity(),col.getAcc(),col.getNoOfStud(),col.getNoOfFac(),col.getCode());
					TreeNode *temp=b.getRoot();
					flag=b.insert(temp,node);
					if(flag==1)
						cout<<"\nInsertion successful\n";
					else
						cout<<"\nInsertion failed---Duplicate element\n";
				}break;
			case 2:
				{
					int key;
					cout<<"\nEnter code to search:";
					cin>>key;
					TreeNode *temp=b.getRoot();
					if(temp==NULL)
						cout<<"\n--->TREE IS EMPTY!!";
					else
					{
						TreeNode *srch=b.search(temp,key);
						if(srch!=NULL)
						{
							cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
							srch->dispDetails();
						}
						else
							cout<<"\n--->No College Found!";
					}

				}break;
			case 3:
				{
					TreeNode *temp=b.getRoot();
					if(temp==NULL)
						cout<<"\nTree is empty\n";
					else
					{
						College *max=b.findMax(temp);
						cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
						max->dispDetails();
					}
				}break;
			case 4:
				{
					TreeNode *temp=b.getRoot();
					 if(temp==NULL)
						  cout<<"\nTree is empty\n";
					  else
					  {
						  College *min=b.findMin(temp);
						  cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
		      				  min->dispDetails();
					  }

				}break;
			case 5:
				{
					TreeNode *temp=b.getRoot();
					if(temp!=NULL)
					{
						cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
						b.inOrder(temp);
					}
					else
						cout<<"\nTree is Empty\n";
				}break;
			case 6:
				{
					TreeNode *temp=b.getRoot();
					if(temp!=NULL)
					{
						cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
						b.preOrder(temp);
					}
					else
						cout<<"\nTree is Empty\n";
				}break;
			case 7:
				{
					TreeNode *temp=b.getRoot();
					if(temp!=NULL)
					{
						cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
						b.postOrder(temp);
					}
					else
						cout<<"\nTree is Empty\n";
				}break;
			case 8:
				{
					int key;
					cout<<"\nEnter counselling code of college to be deleted:";
					cin>>key;
					College *del=b.deleteCollege(key);
					if(del==NULL)
						cout<<"\nDeletion failed---Invalid code";
					else
					{
						cout<<"Name\tCity\tAccreditation\tNo.Of Students\tNo.Of Faculty\tCounselling code\n";
						del->dispDetails();
						cout<<"\n\nDisplayed Details were deleted Successfully\n";
					}
				}break;
			case 9:ch=10;break;
			default:cout<<"\n-->Enter Valid Option!!";
		}
	}while(ch<=9);
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ cat makefile
out.exe:bstImp.o bstApp.o
	g++ -o out.exe bstImp.o bstApp.o
bstImp.o:bstImp.cpp
	g++ -c bstImp.cpp
bstApp.o:bstApp.cpp
	g++ -c bstApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ make
make: 'out.exe' is up to date.
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ ./out.exe 

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:1

*********Enter College Details*********

Enter the name of the College:MSEC

Enter the city name:madurai

Enter Accreditations of the college:NAAC

Enter no. of students studying:100

Enter no. of faculty working:150

Enter Counselling code:1569

Insertion successful

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:1

*********Enter College Details*********

Enter the name of the College:SAC

Enter the city name:nellai

Enter Accreditations of the college:NBA

Enter no. of students studying:250

Enter no. of faculty working:200

Enter Counselling code:2567

Insertion successful

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:1

*********Enter College Details*********

Enter the name of the College:NIT

Enter the city name:trichy

Enter Accreditations of the college:AICTE

Enter no. of students studying:300

Enter no. of faculty working:350

Enter Counselling code:5689

Insertion successful

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:5
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
MSEC	madurai	NAAC		100		150		1569
SAC	nellai	NBA		250		200		2567
NIT	trichy	AICTE		300		350		5689

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:6
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
MSEC	madurai	NAAC		100		150		1569
SAC	nellai	NBA		250		200		2567
NIT	trichy	AICTE		300		350		5689

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:7
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
NIT	trichy	AICTE		300		350		5689
SAC	nellai	NBA		250		200		2567
MSEC	madurai	NAAC		100		150		1569

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:3
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
NIT	trichy	AICTE		300		350		5689

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:4
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
MSEC	madurai	NAAC		100		150		1569

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:8

Enter counselling code of college to be deleted:1569
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
MSEC	madurai	NAAC		100		150		1569


Displayed Details were deleted Successfully

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:7
Name	City	Accreditation	No.Of Students	No.Of Faculty	Counselling code
NIT	trichy	AICTE		300		350		5689
SAC	nellai	NBA		250		200		2567

***************************
1.Insert College details
2.Search using counselling code
3.Find highest counselling code
4.Find lowest counselling code
5.Display details InOrder
6.Display details PreOrder
7.Display details postOrder
8.Delete using counselling code
9.Exit

***************************

Enter your choice:9
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex6$ exit
exit

Script done on 2021-02-21 16:14:07+05:30
