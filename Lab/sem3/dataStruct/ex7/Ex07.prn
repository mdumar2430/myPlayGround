Script started on 2021-02-23 09:54:11+05:30
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ cat avlHead.h 
#include<iostream>
using namespace std;
class College
{
 	public:
 		College();
 		College(string,string,string,int,int,int);
 		~College();
 		void dispDetails();
	private: 
		int noOfStud,noOfFac,code;
		string name,city,acc;
		friend class AVL;
};

class Node
{
	public:
		Node();
		Node(string,string,string,int,int,int);
 		~Node(); 
 		void dispDetails();
 		College * getCollege(Node *);
	private:
	 	College *C;
 		Node *left;
 		Node *right;
 		int height;
		friend class AVL;
};

class AVL
{
 	public:
 		AVL();
 		~AVL();
 		int height(Node *);
 		int balFactor(Node *); //Method for finding Balance Factor
 		void inOrder(Node *); //Method for inorder display
 		void preOrder(Node *); //Method for preorder display
 		void postOrder(Node *); //Method for postorder display
 		Node * getRoot(); //Method for getting root
 		void setRoot(Node *); //Method for setting root
 		Node * LLRotate(Node *); //Method for LL Rotation
 		Node * RRRotate(Node *); //Method for RR Rotation
 		Node * LRRotate(Node *); //Method for LR Rotation
 		Node * RLRotate(Node *); //Method for RL Rotation
 		Node * insert(Node *,Node *); //Method for insert a node in the tree
 		Node * search(Node *,int); //Method for to search a element

 	private:
 		Node *root;
};
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ cat avlImp.cpp 
#include"avlHead.h"
//Methods of class College
College::College()
{
 	code=0;
 	noOfStud=0;
 	noOfFac=0;
 	name="";
 	city="";
 	acc="";
}
College::College(string name,string city,string acc,int noOfStud,int noOfFac,int code)
{
	this->name=name;
	this->city=city;
	this->acc=acc;
	this->noOfFac=noOfFac;
	this->noOfStud=noOfStud;
	this->code=code;
}
College::~College()
{
}
void College::dispDetails()
{
 	cout<<name<<"\t"<<city<<"\t"<<acc<<"\t\t"<<noOfStud<<"\t\t"<<noOfFac<<"\t\t"<<code<<"\n";
}
//Methods of class Node
Node::Node()
{
 	left=NULL;
 	right=NULL;
}
Node::Node(string name,string city,string acc,int noOfStud,int noOfFac,int code)
{
 	C=new College(name,city,acc,noOfStud,noOfFac,code);
 	right=NULL;
 	left=NULL;
 	height=0;
}
Node::~Node()
{
 	right =NULL;
 	left=NULL;
}
void Node::dispDetails()
{
 	C->dispDetails();
}
College * Node::getCollege(Node *node)
{
 	return node->C;
}
//Methods of class AVL
AVL::AVL() //default constructor
{
 	root=NULL;
}
AVL::~AVL()
{
 	root=NULL;
}
int AVL::height(Node* temp) //to calculate height of node
{
 	if(temp==NULL)
 		return -1;
 	return temp->height;
}
int AVL::balFactor(Node* temp) //to calculate BalanceFactor of node
{
 //temp-node whose height to find
 	if(temp==NULL)
 		return -1;
 	return (height(temp->left) - height(temp->right));
}
void AVL::inOrder(Node *temp)
{
 	if(temp!=NULL)
 	{
 		inOrder(temp->left);
 		temp->C->dispDetails();
 		inOrder(temp->right);
 	}
}
void AVL::preOrder(Node *temp)
{
 	if(temp!=NULL)
 	{
 		temp->C->dispDetails();
 		preOrder(temp->left);
 		preOrder(temp->right);
 	}
}
void AVL::postOrder(Node *temp)
{
 	if(temp!=NULL)
 	{
 		postOrder(temp->left);
 		postOrder(temp->right);
 		temp->C->dispDetails();
 	}
}
Node* AVL::getRoot() //getter to root address
{
 	return root;
}
void AVL::setRoot(Node *newNode) //setter to set root node
{
 	root=newNode;
}
Node * AVL::insert(Node* temp,Node* newNode) //insert a node in the tree
{
 //temp-root
 //newNode-node to insert
 	if(temp==NULL)
 	{
 		root=newNode;
 		cout<<"\n\nInsertion successful\n";
 		return root;
 	}
 	else if(temp->C->code > newNode->C->code)
 	{
 		if(temp->left==NULL)
 		{
 			temp->left=newNode;
 			cout<<"\n\nInsertion successful\n";
 		}	
 		else
 			temp->left=insert(temp->left,newNode);
 	}
 	else if(temp->C->code < newNode->C->code)
 	{
 		if(temp->right==NULL)
 		{
 			temp->right=newNode;
 			cout<<"\n\nInsertion successful\n";
 		}
 		else
 			temp->right=insert(temp->right,newNode);
 	}
 	else
 		cout<<"\nInsertion failed--Duplicate element\n";
 	temp->height = max(height(temp->left),height(temp->right)) + 1;
 	int bal=balFactor(temp);
 	if(bal>1)
 	{
 		if(newNode->C->code < temp->left->C->code)
 			return LLRotate(temp);
 		else
 			return LRRotate(temp);
 	}
 	if(bal<-1)
 	{
 		if(newNode->C->code > temp->right->C->code)
 			return RRRotate(temp);
 		else
 			return RLRotate(temp);
 	}
 	return temp;
}
Node* AVL::search(Node *temp,int key) //to search for an account
{
 	if(temp==NULL || temp->C->code==key)
 		return temp;
 	else if(temp->C->code < key)
 		search(temp->right,key);
 	else if(temp->C->code > key)
 		search(temp->left,key);
 	else
 		return NULL;
}
Node * AVL::LLRotate(Node* k3) //LL Rotation
{
 	//k3 - root node
 	Node *k2=k3->left;
 	Node *temp=k2->right;
 	k2->right=k3;
 	k3->left=temp;
 	//height update
 	k3->height=max(height(k3->left),height(k3->right))+1;
 	k2->height=max(height(k2->left),height(k2->right))+1;
 	return k2;
}
Node * AVL::RRRotate(Node* k1) //RR Rotation
{
 	//k1- root node
 	Node *k2=k1->right;
 	Node *temp=k2->left;
 	k2->left=k1;
 	k1->right=temp;
 	k1->height=max(height(k1->left),height(k1->right))+1;
 	k2->height=max(height(k2->left),height(k2->right))+1;
 	return k2;
}
Node * AVL::LRRotate(Node *k3) //LR rotation
{
 	//k3- root node
 	k3->left=RRRotate(k3->left); //RR rotate
 	return LLRotate(k3); //LL rotate
}
Node * AVL::RLRotate(Node *k1) //LR rotation
{
 	//k3- root node
 	k1->right=RRRotate(k1->right); //RR rotate
 	return RRRotate(k1); //LL rotate
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ cat avlApp.cpp 
#include"avlHead.h"
int main()
{
 	string name,city,acc;
 	int noOfStud,noOfFac,code;
 	int flag,choice=0;
 	AVL a1;
 	while(choice<6)
 	{
 		cout<<"\n***************************\n";
 		cout<<"1.Insert College details\n";
 		cout<<"2.Search using code\n";
 		cout<<"3.Display details InOrder\n";
 		cout<<"4.Display details PreOrder\n";
 		cout<<"5.Display details postOrder\n";
 		cout<<"6.Exit";
 		cout<<"\n***************************\n";
 		cout<<"\nEnter your choice:";
 		cin>>choice; //User enters choice
 		switch(choice)
 		{
 			case 1: //Insertion
 				{
 					cout<<"Enter the details of the College:\n";
 					cout<<"\nEnter name:";
 					cin>>name;
					cout<<"\nEnter city:";
					cin>>city;
					cout<<"\nEnter accreditation:";
					cin>>acc;
					cout<<"\nEnter no. of students:";
					cin>>noOfStud;
					cout<<"\nEnter no. of Faculty:";
					cin>>noOfFac;
					cout<<"\nEnter conselling code:";
					cin>>code;
 					Node *node=new Node(name,city,acc,noOfStud,noOfFac,code);
 					Node *temp=a1.getRoot();
 					Node *ins=a1.insert(temp,node);
 					a1.setRoot(ins);
 					break;
 				}
 		case 2: //Search using key
 			{
 					cout<<"Enter College code to search:";
 					cin>>code;
 					Node *temp=a1.getRoot();
 					if(temp==NULL)
 						cout<<"\nTree is empty\n";
 					else
 					{
 						Node *ret1=a1.search(temp,code);
 						if(ret1==NULL)
 							cout<<"\nCode doesn't exist\n";
 						else
						{
 							cout<<"\n\nCollege details are:\n\n\n";
							cout<<"Name\tCity\tAccreditation\tNo.of Students\tNo.of Faculty\tcode\n";
							ret1->dispDetails();
 						}
 					}
 					break;
 			}
 		case 3: //Inorder display
 			{
 				Node *temp=a1.getRoot();
 				if(temp!=NULL)
 				{
 					cout<<"\n\nCollege details are:\n\n\n";
 					cout<<"Name\tCity\tAccreditation\tNo.of Students\tNo.of Faculty\tcode\n";
					a1.inOrder(temp);
 				}
 				else
 					cout<<"\nTree is Empty\n";
 					break;
 			}
 		case 4: //Preorder display
 			{
 				Node *temp=a1.getRoot();
 				if(temp!=NULL)
 				{
 					cout<<"\n\nCollege details are:\n\n\n";
 					cout<<"Name\tCity\tAccreditation\tNo.of Students\tNo.of Faculty\tcode\n";
					a1.preOrder(temp);
 				}
 				else
 					cout<<"\nTree is Empty\n";
 					break;
 			}
 		case 5: //Postorder display
 			{
 				Node *temp=a1.getRoot();
 				if(temp!=NULL)
 				{
 					cout<<"\n\nCollege details are:\n\n\n";
	 				cout<<"Name\tCity\tAccreditation\tNo.of Students\tNo.of Faculty\tcode\n";
					a1.postOrder(temp);
 				}
 				else
				{
 					cout<<"\nTree is Empty\n";
 					break;
 				}
 			}
		}
 	}
}
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ cat makefile
out.exe:avlImp.o avlApp.o
	g++ -o out.exe avlImp.o avlApp.o
avlImp.o:avlImp.cpp
	g++ -c avlImp.cpp
avlApp.o:avlApp.cpp
	g++ -c avlApp.cpp
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ ./out.exe 

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:1
Enter the details of the College:

Enter name:MSEC

Enter city:vnr

Enter accreditation:NAAC

Enter no. of students:145

Enter no. of Faculty:167

Enter conselling code:2562


Insertion successful

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:1
Enter the details of the College:

Enter name:IIT

Enter city:trichy

Enter accreditation:AICTE

Enter no. of students:567

Enter no. of Faculty:456

Enter conselling code:1678


Insertion successful

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:1
Enter the details of the College:

Enter name:PSG

Enter city:cbe

Enter accreditation:NBA

Enter no. of students:2456

Enter no. of Faculty:345

Enter conselling code:7890


Insertion successful

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:2
Enter College code to search:7890


College details are:


Name	City	Accreditation	No.of Students	No.of Faculty	code
PSG	cbe	NBA		245		345		7890

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:3


College details are:


Name	City	Accreditation	No.of Students	No.of Faculty	code
IIT	trichy	AICTE		567		456		1678
MSEC	vnr	NAAC		145		167		2562
PSG	cbe	NBA		245		345		7890

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:4


College details are:


Name	City	Accreditation	No.of Students	No.of Faculty	code
MSEC	vnr	NAAC		145		167		2562
IIT	trichy	AICTE		567		456		1678
PSG	cbe	NBA		245		345		7890

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:5


College details are:


Name	City	Accreditation	No.of Students	No.of Faculty	code
IIT	trichy	AICTE		567		456		1678
PSG	cbe	NBA		245		345		7890
MSEC	vnr	NAAC		145		167		2562

***************************
1.Insert College details
2.Search using code
3.Display details InOrder
4.Display details PreOrder
5.Display details postOrder
6.Exit
***************************

Enter your choice:6
mdumar@MdUmar: /mnt/d/Lab/sem3/dataStruct/ex7$ exit
exit

Script done on 2021-02-23 09:57:56+05:30
